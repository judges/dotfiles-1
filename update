#!/bin/sh

# Find the absolute path to this script, then make it relative to the current
# user's home (to make the symlink targets prettier).
dotfiles=$(cd "$(dirname "$0")" && pwd)
dotfiles_relative=${dotfiles#$HOME/}

# Handle command-line options. -f will overwrite stale files when updating
# symlinks. -v will display a diff of stale files instead of a simple list.
unset force verbose
while getopts fv opt; do
  case "$opt" in
    f) force=1 ;;
    v) verbose=1 ;;
    ?) exit ;;
  esac
done

# Find all non-directory files whose names (and parent directories' names)
# don't begin with a dot. Use sed to strip the leading "./". Assumes no spaces
# in filenames.
cd "$dotfiles"
for file in *; do
  test $file = $(basename $0) && continue
  target="$HOME/.$file"

  # If the target does not exist, or -f (force) was given, create the symlink.
  if [ ! -e "$target" -o -n "$force" ]; then
    ln -sfv "$dotfiles_relative/$file" "$target" | sed -e "s}^$HOME/}}"
  # If the target exists and is pointing to the source, do nothing.
  elif [ "$target" -ef "$file" ]; then
    continue
  # Otherwise, the target exists and does not match the source. Emit a warning,
  # and diff the files if -v (verbose) was given.
  else
    echo "==> .$file is stale" >&2
    test -n "$verbose" && diff -u "$target" "$file"
  fi
done
