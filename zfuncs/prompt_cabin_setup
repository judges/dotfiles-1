#!zsh

prompt_cabin_setup() {
    # Hostname and pwd, then %/# or a red symbol if the last command failed.
    PROMPT='%m:%~'
    PROMPT+='%(?.%#.%B%F{red}✖%b%f) '

    local format='%m%c%u%B%F{black}%b'
    zstyle ':vcs_info:*' formats "$format%%b%f"
    zstyle ':vcs_info:*' actionformats "$format%%b%F{yellow}⚡%a%f" 
    zstyle ':vcs_info:*' enable git hg svn
    zstyle ':vcs_info:*' check-for-changes true
    zstyle ':vcs_info:*' stagedstr '%F{green}•'
    zstyle ':vcs_info:*' unstagedstr '%F{red}•'

    # vcs_info doesn't detect added/removed files, so I do it myself.
    zstyle ':vcs_info:git*' check-for-changes false
    zstyle ':vcs_info:git*+post-backend:*' hooks prompt_cabin_post_git

    autoload -Uz vcs_info add-zsh-hook
    add-zsh-hook -D precmd 'prompt_*_precmd'
    add-zsh-hook -Uz precmd prompt_cabin_precmd
}


+vi-prompt_cabin_post_git() {
    prompt_cabin_git_changes
    prompt_cabin_git_ahead_behind
    prompt_cabin_git_stash
    prompt_cabin_git_remotebranch
}


prompt_cabin_precmd() {
    vcs_info
    RPROMPT=$vcs_info_msg_0_
}


# Detect staged/unstaged changes.
# vcs_info does not detect added/removed files, which I like to know about.
prompt_cabin_git_changes() {
    local uniques code
    uniques=$(git status --porcelain | cut -c -2 | sort -u)
    foreach code in ${=uniques// /_}; do
        case ${code//[^_?\!]/x} in
            x?) hook_com[staged]=1 ;|
            ?[x?]) hook_com[unstaged]=1 ;|
        esac
    done
}


# Detect whether we have changes to push or merge.
prompt_cabin_git_ahead_behind() {
    local ahead behind
    ahead=$(git log --max-count=1 @{upstream}.. 2>/dev/null)
    behind=$(git log --max-count=1 ..@{upstream} 2>/dev/null)
    [[ -n $ahead ]] && hook_com[misc]+='%F{green}▴'
    [[ -n $behind ]] && hook_com[misc]+='%F{red}▾'
    [[ -n $ahead || -n $behind ]] && hook_com[misc]+=' '
}


# Detect stashes.
prompt_cabin_git_stash() {
    if [[ -n $(git stash list 2>/dev/null) ]]; then
        hook_com[misc]+='%F{white}⿳'
    fi
}


# Detect if the remote-tracking branch has a different name from the local one.
prompt_cabin_git_remotebranch() {
    local remote
    remote=${$(git rev-parse --symbolic-full-name @{upstream} 2>/dev/null)##*/}
    if [[ -n $remote && $remote != $hook_com[branch] ]]; then
        hook_com[branch]+="%b%F{blue}·$remote"
    fi
}


prompt_cabin_setup $*
